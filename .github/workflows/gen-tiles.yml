name: Generate Tiles

on:
  push:
    branches:
      - "main"
  workflow_dispatch:
  schedule:
    - cron: "0 0 1 */2 *"
jobs:
  build-tiles:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - uses: actions/setup-node@v3
        with:
          node-version: '20.x'
      - run: npm install json5
      - name: Load manifest and SSH info
        id: load-manifest
        uses: actions/github-script@v7
        env:
          ACTION_TYPE: ${{ github.event_name }}
          API_KEY: ${{ secrets.API_KEY }}
        with:
          script: |
            const fs = require('fs');
            const JSON5 = require('json5');
            const { ACTION_TYPE, API_KEY } = process.env;
            const manifestContent = fs.readFileSync('./manifest.json', 'utf8');
            const manifest = JSON5.parse(manifestContent);
            const fileName = `${manifest.name}.mbtiles`;
            let sshInfo = manifest.ssh;
            let useSSH = true;
            if (!sshInfo || !sshInfo.host) {
              useSSH = false;
              sshInfo = {}; // Set to an empty object to avoid null references
            }
            const zoomLevel = (ACTION_TYPE == 'push') ? '5' : manifest.zoom_level;
            const commandParts = [
              `--style ${manifest.style}`,
              `-Z ${zoomLevel}`,
              `--bounds ${manifest.bounds}`,
              `--monthyear ${manifest.monthyear}`,
              `-f ${manifest.name}`,
            ];
            if (API_KEY) commandParts.push(`--apikey ${API_KEY}`);
            // Include additional options if they are present in the manifest
            if (manifest.minzoom) commandParts.push(`--minzoom ${manifest.minzoom}`);
            if (manifest.maxzoom) commandParts.push(`--maxzoom ${manifest.maxzoom}`);
            if (manifest.tile_format) commandParts.push(`--format ${manifest.tile_format}`);
            if (manifest.scale) commandParts.push(`--scale ${manifest.scale}`);
            if (manifest.tile_size) commandParts.push(`--size ${manifest.tile_size}`);
            if (manifest.attribution) commandParts.push(`--attribution ${manifest.attribution}`);
            if (manifest.logo) commandParts.push(`--logo ${manifest.logo}`);
            if (manifest.center) commandParts.push(`--center ${manifest.center}`);
            if (manifest.pixel_ratio) commandParts.push(`--pixel_ratio ${manifest.pixel_ratio}`);
            if (manifest.language) commandParts.push(`--language ${manifest.language}`);
            const command = commandParts.join(' ');
            core.setOutput('command', command);
            core.setOutput('useSSH', useSSH);
            if (useSSH) {
              core.setOutput('sshHost', sshInfo.host);
              core.setOutput('sshUsername', sshInfo.username);
              core.setOutput('sshPort', sshInfo.port);
              const currentDate = new Date();
              const currentYear = currentDate.getFullYear();
              const currentMonth = currentDate.toLocaleString('default', { month: 'long' }).toLowerCase();
              const currentDay = String(currentDate.getDate()).padStart(2, '0');
              const targetPath = `${sshInfo.target}/${manifest.style}-${currentDay}-${currentMonth}-${currentYear}`;
              core.setOutput('sshTarget', targetPath);
            }
            core.setOutput('sshFileName', fileName);
      - name: Scrape tiles
        run: |
          docker run --rm -v ${{ github.workspace }}/outputs:/app/outputs communityfirst/mapgl-tile-renderer:main ${{ steps.load-manifest.outputs.command }}
      - name: Copy mbtiles to EDT Cloud
        if: ${{ steps.load-manifest.outputs.useSSH }}
        uses: appleboy/scp-action@v0.1.3
        with:
          host: ${{ steps.load-manifest.outputs.sshHost }}
          username: ${{ steps.load-manifest.outputs.sshUsername }}
          port: ${{ steps.load-manifest.outputs.sshPort }}
          key: ${{ secrets.SSH_KEY }}
          source: "${{ github.workspace }}/outputs/${{ steps.load-manifest.outputs.sshFileName }}"
          target: "${{ steps.load-manifest.outputs.sshTarget }}"
          strip_components: 3
          timeout: 60s
          command_timeout: 30m
      - name: Setting correct file persmissions
        if: ${{ steps.load-manifest.outputs.useSSH }}
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ steps.load-manifest.outputs.sshHost }}
          username: ${{ steps.load-manifest.outputs.sshUsername }}
          key: ${{ secrets.SSH_KEY }}
          port: ${{ steps.load-manifest.outputs.sshPort }}
          script: chown -R 1000:1000 ${{ steps.load-manifest.outputs.sshTarget }}
      - name: Upload mbtiles file as artifact
        if: ${{ !steps.load-manifest.outputs.useSSH }}
        uses: actions/upload-artifact@v3
        with:
          name: ${{ steps.load-manifest.outputs.sshFileName }}
          path: outputs/*.mbtiles
          if-no-files-found: error # 'warn' or 'ignore' are also available, 'error' will fail the step
          retention-days: 90
