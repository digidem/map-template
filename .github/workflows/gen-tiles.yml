name: Generate Tiles

on:
  push:
    branches:
      - "main"
  workflow_dispatch:
  schedule:
    - cron: "0 0 1 */2 *"

jobs:
  prepare:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.load-manifest.outputs.matrix }}
      sshInfo: ${{ steps.load-manifest.outputs.ssh }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: '20.x'
      - run: npm install json5
      - name: Load manifest
        id: load-manifest
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const JSON5 = require('json5');
            const manifestContent = fs.readFileSync('./manifest.json', 'utf8');
            const manifest = JSON5.parse(manifestContent);
            const tileNames = manifest.tiles.map(tile => tile.name);
            const nameSet = new Set(tileNames);
            if (nameSet.size !== tileNames.length) {
              throw new Error('Duplicate tile name detected in manifest.');
            }
            core.setOutput('matrix', JSON.stringify([...nameSet]));
            core.setOutput('ssh', JSON.stringify(manifest.ssh));
  build-and-deploy:
    needs: prepare
    runs-on: ubuntu-latest
    strategy:
      matrix: ${{ fromJson(needs.prepare.outputs.matrix) }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
      - run: npm install json5
      - name: Load tile configuration
        id: load-tile-config
        run: |
          const fs = require('fs');
          const JSON5 = require('json5');
          const core = require('@actions/core');
          const manifestContent = fs.readFileSync('./manifest.json', 'utf8');
          const manifest = JSON5.parse(manifestContent);
          const tileConfig = manifest.tiles.find(tile => tile.name === '${{ matrix }}');
          if (!tileConfig) {
            throw new Error(`Tile configuration for '${{ matrix }}' not found.`);
          }
          core.setOutput('style', tileConfig.style);
          core.setOutput('zoom_level', tileConfig.zoom_level);
          core.setOutput('bounds', JSON.stringify(tileConfig.bounds));
          core.setOutput('monthyear', tileConfig.monthyear);
        shell: bash
      - name: Scrape tiles
        run: |
          docker run --rm -v ${{ github.workspace }}/outputs:/app/outputs communityfirst/mapgl-tile-renderer:main \
          --style ${{ steps.load-tile-config.outputs.style }} \
          -Z ${{ steps.load-tile-config.outputs.zoom_level }} \
          --bounds ${{ steps.load-tile-config.outputs.bounds }} \
          --monthyear ${{ steps.load-tile-config.outputs.monthyear }} \
          -f ${{ matrix }}
      - name: Copy mbtiles to EDT Cloud
        if: ${{ fromJson(needs.prepare.outputs.sshInfo).host }}
        uses: appleboy/scp-action@v0.1.3
        with:
          host: ${{ fromJson(needs.prepare.outputs.sshInfo).host }}
          username: ${{ fromJson(needs.prepare.outputs.sshInfo).username }}
          port: ${{ fromJson(needs.prepare.outputs.sshInfo).port }}
          key: ${{ secrets.SSH_KEY }}
          source: "${{ github.workspace }}/outputs/${{ matrix }}.mbtiles"
          target: "${{ fromJson(needs.prepare.outputs.sshInfo).target }}/${{ steps.load-tile-config.outputs.style }}-${{ github.run_id }}"
          strip_components: 3
          timeout: 60s
          command_timeout: 30m
      - name: Setting correct file permissions
        if: ${{ fromJson(needs.prepare.outputs.sshInfo).host }}
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ fromJson(needs.prepare.outputs.sshInfo).host }}
          username: ${{ fromJson(needs.prepare.outputs.sshInfo).username }}
          key: ${{ secrets.SSH_KEY }}
          port: ${{ fromJson(needs.prepare.outputs.sshInfo).port }}
          script: chown -R 1000:1000 "${{ fromJson(needs.prepare.outputs.sshInfo).target }}/${{ steps.load-tile-config.outputs.style }}-${{ github.run_id }}"
      - name: Upload mbtiles file as artifact
        if: ${{ !fromJson(needs.prepare.outputs.sshInfo).host }}
        uses: actions/upload-artifact@v3
        with:
          name: mbtiles-${{ github.run_number }}
          path: outputs/*.mbtiles
          if-no-files-found: error # 'warn' or 'ignore' are also available, 'error' will fail the step
          retention-days: 90
